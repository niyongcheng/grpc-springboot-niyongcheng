// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: main/proto/route_guide.proto

package com.niyongcheng.examples.routeguide;

/**
 * <pre>
 * Interface exported by the server.
 * </pre>
 *
 * Protobuf service {@code routeguide.RouteGuide}
 */
public  abstract class RouteGuide
    implements com.google.protobuf.Service {
  protected RouteGuide() {}

  public interface Interface {
    /**
     * <pre>
     * A simple RPC.
     * Obtains the feature at a given position.
     * A feature with an empty name is returned if there's no feature at the given
     * position.
     * </pre>
     *
     * <code>rpc GetFeature(.routeguide.Point) returns (.routeguide.Feature);</code>
     */
    public abstract void getFeature(
        com.google.protobuf.RpcController controller,
        com.niyongcheng.examples.routeguide.Point request,
        com.google.protobuf.RpcCallback<com.niyongcheng.examples.routeguide.Feature> done);

    /**
     * <pre>
     * A server-to-client streaming RPC.
     * Obtains the Features available within the given Rectangle.  Results are
     * streamed rather than returned at once (e.g. in a response message with a
     * repeated field), as the rectangle may cover a large area and contain a
     * huge number of features.
     * </pre>
     *
     * <code>rpc ListFeatures(.routeguide.Rectangle) returns (stream .routeguide.Feature);</code>
     */
    public abstract void listFeatures(
        com.google.protobuf.RpcController controller,
        com.niyongcheng.examples.routeguide.Rectangle request,
        com.google.protobuf.RpcCallback<com.niyongcheng.examples.routeguide.Feature> done);

    /**
     * <pre>
     * A client-to-server streaming RPC.
     * Accepts a stream of Points on a route being traversed, returning a
     * RouteSummary when traversal is completed.
     * </pre>
     *
     * <code>rpc RecordRoute(stream .routeguide.Point) returns (.routeguide.RouteSummary);</code>
     */
    public abstract void recordRoute(
        com.google.protobuf.RpcController controller,
        com.niyongcheng.examples.routeguide.Point request,
        com.google.protobuf.RpcCallback<com.niyongcheng.examples.routeguide.RouteSummary> done);

    /**
     * <pre>
     * A Bidirectional streaming RPC.
     * Accepts a stream of RouteNotes sent while a route is being traversed,
     * while receiving other RouteNotes (e.g. from other users).
     * </pre>
     *
     * <code>rpc RouteChat(stream .routeguide.RouteNote) returns (stream .routeguide.RouteNote);</code>
     */
    public abstract void routeChat(
        com.google.protobuf.RpcController controller,
        com.niyongcheng.examples.routeguide.RouteNote request,
        com.google.protobuf.RpcCallback<com.niyongcheng.examples.routeguide.RouteNote> done);

  }

  public static com.google.protobuf.Service newReflectiveService(
      final Interface impl) {
    return new RouteGuide() {
      @java.lang.Override
      public  void getFeature(
          com.google.protobuf.RpcController controller,
          com.niyongcheng.examples.routeguide.Point request,
          com.google.protobuf.RpcCallback<com.niyongcheng.examples.routeguide.Feature> done) {
        impl.getFeature(controller, request, done);
      }

      @java.lang.Override
      public  void listFeatures(
          com.google.protobuf.RpcController controller,
          com.niyongcheng.examples.routeguide.Rectangle request,
          com.google.protobuf.RpcCallback<com.niyongcheng.examples.routeguide.Feature> done) {
        impl.listFeatures(controller, request, done);
      }

      @java.lang.Override
      public  void recordRoute(
          com.google.protobuf.RpcController controller,
          com.niyongcheng.examples.routeguide.Point request,
          com.google.protobuf.RpcCallback<com.niyongcheng.examples.routeguide.RouteSummary> done) {
        impl.recordRoute(controller, request, done);
      }

      @java.lang.Override
      public  void routeChat(
          com.google.protobuf.RpcController controller,
          com.niyongcheng.examples.routeguide.RouteNote request,
          com.google.protobuf.RpcCallback<com.niyongcheng.examples.routeguide.RouteNote> done) {
        impl.routeChat(controller, request, done);
      }

    };
  }

  public static com.google.protobuf.BlockingService
      newReflectiveBlockingService(final BlockingInterface impl) {
    return new com.google.protobuf.BlockingService() {
      public final com.google.protobuf.Descriptors.ServiceDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }

      public final com.google.protobuf.Message callBlockingMethod(
          com.google.protobuf.Descriptors.MethodDescriptor method,
          com.google.protobuf.RpcController controller,
          com.google.protobuf.Message request)
          throws com.google.protobuf.ServiceException {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.callBlockingMethod() given method descriptor for " +
            "wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return impl.getFeature(controller, (com.niyongcheng.examples.routeguide.Point)request);
          case 1:
            return impl.listFeatures(controller, (com.niyongcheng.examples.routeguide.Rectangle)request);
          case 2:
            return impl.recordRoute(controller, (com.niyongcheng.examples.routeguide.Point)request);
          case 3:
            return impl.routeChat(controller, (com.niyongcheng.examples.routeguide.RouteNote)request);
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getRequestPrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getRequestPrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return com.niyongcheng.examples.routeguide.Point.getDefaultInstance();
          case 1:
            return com.niyongcheng.examples.routeguide.Rectangle.getDefaultInstance();
          case 2:
            return com.niyongcheng.examples.routeguide.Point.getDefaultInstance();
          case 3:
            return com.niyongcheng.examples.routeguide.RouteNote.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getResponsePrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getResponsePrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return com.niyongcheng.examples.routeguide.Feature.getDefaultInstance();
          case 1:
            return com.niyongcheng.examples.routeguide.Feature.getDefaultInstance();
          case 2:
            return com.niyongcheng.examples.routeguide.RouteSummary.getDefaultInstance();
          case 3:
            return com.niyongcheng.examples.routeguide.RouteNote.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

    };
  }

  /**
   * <pre>
   * A simple RPC.
   * Obtains the feature at a given position.
   * A feature with an empty name is returned if there's no feature at the given
   * position.
   * </pre>
   *
   * <code>rpc GetFeature(.routeguide.Point) returns (.routeguide.Feature);</code>
   */
  public abstract void getFeature(
      com.google.protobuf.RpcController controller,
      com.niyongcheng.examples.routeguide.Point request,
      com.google.protobuf.RpcCallback<com.niyongcheng.examples.routeguide.Feature> done);

  /**
   * <pre>
   * A server-to-client streaming RPC.
   * Obtains the Features available within the given Rectangle.  Results are
   * streamed rather than returned at once (e.g. in a response message with a
   * repeated field), as the rectangle may cover a large area and contain a
   * huge number of features.
   * </pre>
   *
   * <code>rpc ListFeatures(.routeguide.Rectangle) returns (stream .routeguide.Feature);</code>
   */
  public abstract void listFeatures(
      com.google.protobuf.RpcController controller,
      com.niyongcheng.examples.routeguide.Rectangle request,
      com.google.protobuf.RpcCallback<com.niyongcheng.examples.routeguide.Feature> done);

  /**
   * <pre>
   * A client-to-server streaming RPC.
   * Accepts a stream of Points on a route being traversed, returning a
   * RouteSummary when traversal is completed.
   * </pre>
   *
   * <code>rpc RecordRoute(stream .routeguide.Point) returns (.routeguide.RouteSummary);</code>
   */
  public abstract void recordRoute(
      com.google.protobuf.RpcController controller,
      com.niyongcheng.examples.routeguide.Point request,
      com.google.protobuf.RpcCallback<com.niyongcheng.examples.routeguide.RouteSummary> done);

  /**
   * <pre>
   * A Bidirectional streaming RPC.
   * Accepts a stream of RouteNotes sent while a route is being traversed,
   * while receiving other RouteNotes (e.g. from other users).
   * </pre>
   *
   * <code>rpc RouteChat(stream .routeguide.RouteNote) returns (stream .routeguide.RouteNote);</code>
   */
  public abstract void routeChat(
      com.google.protobuf.RpcController controller,
      com.niyongcheng.examples.routeguide.RouteNote request,
      com.google.protobuf.RpcCallback<com.niyongcheng.examples.routeguide.RouteNote> done);

  public static final
      com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptor() {
    return com.niyongcheng.examples.routeguide.RouteGuideProto.getDescriptor().getServices().get(0);
  }
  public final com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }

  public final void callMethod(
      com.google.protobuf.Descriptors.MethodDescriptor method,
      com.google.protobuf.RpcController controller,
      com.google.protobuf.Message request,
      com.google.protobuf.RpcCallback<
        com.google.protobuf.Message> done) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.callMethod() given method descriptor for wrong " +
        "service type.");
    }
    switch(method.getIndex()) {
      case 0:
        this.getFeature(controller, (com.niyongcheng.examples.routeguide.Point)request,
          com.google.protobuf.RpcUtil.<com.niyongcheng.examples.routeguide.Feature>specializeCallback(
            done));
        return;
      case 1:
        this.listFeatures(controller, (com.niyongcheng.examples.routeguide.Rectangle)request,
          com.google.protobuf.RpcUtil.<com.niyongcheng.examples.routeguide.Feature>specializeCallback(
            done));
        return;
      case 2:
        this.recordRoute(controller, (com.niyongcheng.examples.routeguide.Point)request,
          com.google.protobuf.RpcUtil.<com.niyongcheng.examples.routeguide.RouteSummary>specializeCallback(
            done));
        return;
      case 3:
        this.routeChat(controller, (com.niyongcheng.examples.routeguide.RouteNote)request,
          com.google.protobuf.RpcUtil.<com.niyongcheng.examples.routeguide.RouteNote>specializeCallback(
            done));
        return;
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getRequestPrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getRequestPrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return com.niyongcheng.examples.routeguide.Point.getDefaultInstance();
      case 1:
        return com.niyongcheng.examples.routeguide.Rectangle.getDefaultInstance();
      case 2:
        return com.niyongcheng.examples.routeguide.Point.getDefaultInstance();
      case 3:
        return com.niyongcheng.examples.routeguide.RouteNote.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getResponsePrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getResponsePrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return com.niyongcheng.examples.routeguide.Feature.getDefaultInstance();
      case 1:
        return com.niyongcheng.examples.routeguide.Feature.getDefaultInstance();
      case 2:
        return com.niyongcheng.examples.routeguide.RouteSummary.getDefaultInstance();
      case 3:
        return com.niyongcheng.examples.routeguide.RouteNote.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public static Stub newStub(
      com.google.protobuf.RpcChannel channel) {
    return new Stub(channel);
  }

  public static final class Stub extends com.niyongcheng.examples.routeguide.RouteGuide implements Interface {
    private Stub(com.google.protobuf.RpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.RpcChannel channel;

    public com.google.protobuf.RpcChannel getChannel() {
      return channel;
    }

    public  void getFeature(
        com.google.protobuf.RpcController controller,
        com.niyongcheng.examples.routeguide.Point request,
        com.google.protobuf.RpcCallback<com.niyongcheng.examples.routeguide.Feature> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        com.niyongcheng.examples.routeguide.Feature.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.niyongcheng.examples.routeguide.Feature.class,
          com.niyongcheng.examples.routeguide.Feature.getDefaultInstance()));
    }

    public  void listFeatures(
        com.google.protobuf.RpcController controller,
        com.niyongcheng.examples.routeguide.Rectangle request,
        com.google.protobuf.RpcCallback<com.niyongcheng.examples.routeguide.Feature> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        com.niyongcheng.examples.routeguide.Feature.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.niyongcheng.examples.routeguide.Feature.class,
          com.niyongcheng.examples.routeguide.Feature.getDefaultInstance()));
    }

    public  void recordRoute(
        com.google.protobuf.RpcController controller,
        com.niyongcheng.examples.routeguide.Point request,
        com.google.protobuf.RpcCallback<com.niyongcheng.examples.routeguide.RouteSummary> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        com.niyongcheng.examples.routeguide.RouteSummary.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.niyongcheng.examples.routeguide.RouteSummary.class,
          com.niyongcheng.examples.routeguide.RouteSummary.getDefaultInstance()));
    }

    public  void routeChat(
        com.google.protobuf.RpcController controller,
        com.niyongcheng.examples.routeguide.RouteNote request,
        com.google.protobuf.RpcCallback<com.niyongcheng.examples.routeguide.RouteNote> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        com.niyongcheng.examples.routeguide.RouteNote.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.niyongcheng.examples.routeguide.RouteNote.class,
          com.niyongcheng.examples.routeguide.RouteNote.getDefaultInstance()));
    }
  }

  public static BlockingInterface newBlockingStub(
      com.google.protobuf.BlockingRpcChannel channel) {
    return new BlockingStub(channel);
  }

  public interface BlockingInterface {
    public com.niyongcheng.examples.routeguide.Feature getFeature(
        com.google.protobuf.RpcController controller,
        com.niyongcheng.examples.routeguide.Point request)
        throws com.google.protobuf.ServiceException;

    public com.niyongcheng.examples.routeguide.Feature listFeatures(
        com.google.protobuf.RpcController controller,
        com.niyongcheng.examples.routeguide.Rectangle request)
        throws com.google.protobuf.ServiceException;

    public com.niyongcheng.examples.routeguide.RouteSummary recordRoute(
        com.google.protobuf.RpcController controller,
        com.niyongcheng.examples.routeguide.Point request)
        throws com.google.protobuf.ServiceException;

    public com.niyongcheng.examples.routeguide.RouteNote routeChat(
        com.google.protobuf.RpcController controller,
        com.niyongcheng.examples.routeguide.RouteNote request)
        throws com.google.protobuf.ServiceException;
  }

  private static final class BlockingStub implements BlockingInterface {
    private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.BlockingRpcChannel channel;

    public com.niyongcheng.examples.routeguide.Feature getFeature(
        com.google.protobuf.RpcController controller,
        com.niyongcheng.examples.routeguide.Point request)
        throws com.google.protobuf.ServiceException {
      return (com.niyongcheng.examples.routeguide.Feature) channel.callBlockingMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        com.niyongcheng.examples.routeguide.Feature.getDefaultInstance());
    }


    public com.niyongcheng.examples.routeguide.Feature listFeatures(
        com.google.protobuf.RpcController controller,
        com.niyongcheng.examples.routeguide.Rectangle request)
        throws com.google.protobuf.ServiceException {
      return (com.niyongcheng.examples.routeguide.Feature) channel.callBlockingMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        com.niyongcheng.examples.routeguide.Feature.getDefaultInstance());
    }


    public com.niyongcheng.examples.routeguide.RouteSummary recordRoute(
        com.google.protobuf.RpcController controller,
        com.niyongcheng.examples.routeguide.Point request)
        throws com.google.protobuf.ServiceException {
      return (com.niyongcheng.examples.routeguide.RouteSummary) channel.callBlockingMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        com.niyongcheng.examples.routeguide.RouteSummary.getDefaultInstance());
    }


    public com.niyongcheng.examples.routeguide.RouteNote routeChat(
        com.google.protobuf.RpcController controller,
        com.niyongcheng.examples.routeguide.RouteNote request)
        throws com.google.protobuf.ServiceException {
      return (com.niyongcheng.examples.routeguide.RouteNote) channel.callBlockingMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        com.niyongcheng.examples.routeguide.RouteNote.getDefaultInstance());
    }

  }

  // @@protoc_insertion_point(class_scope:routeguide.RouteGuide)
}

